{"version":3,"sources":["useCoda.js"],"names":["camelize","str","replace","match","index","toLowerCase","toUpperCase","mapRowsAndCols","row","columns","Object","entries","values","map","key","value","name","reduce","res","curr","coda","instance","getTableData","docId","tableIdOrName","data","dataColumns","get","getTableColumns","dataRows","params","sortBy","getTableRows","items","id","getViewData","viewIdOrName","getViewColumns","getViewRows"],"mappings":";AAmBO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAnBP,MAAMA,EAAYC,GAChBA,EAAIC,QAAQ,0BAA2B,SAAUC,EAAOC,GAClD,OAAW,IAAVD,EAAoB,GACR,IAAVC,EAAcD,EAAME,cAAgBF,EAAMG,gBAG/CC,EAAiB,CAACC,EAAKC,KAUpB,MAAA,IATaC,OAAOC,QAAQH,EAAII,QAAQC,IAAI,EAAEC,EAAKC,MAAY,CACpEC,KAAMP,EAAQK,GACdC,MAAAA,KAGyBE,OACzB,CAACC,EAAKC,KAAU,IAAKD,EAAMlB,CAAAA,EAASmB,EAAKH,OAAQG,EAAKJ,QACtD,MAKSK,EAAQC,IAwCZ,MAAA,CAAEC,aAvBY,OAASC,MAAAA,EAAOC,cAAAA,MAC7B,MAAEC,KAAMC,QAjBQ,GAAGH,MAAAA,EAAOC,cAAAA,KAChCH,EAASM,aAAaJ,YAAgBC,aAgBFI,CAAgB,CAClDL,MAAAA,EACAC,cAAAA,KAEMC,KAAMI,QAlBK,GAAGN,MAAAA,EAAOC,cAAAA,KAC7BH,EAASM,aAAaJ,YAAgBC,SAAsB,CAC1DM,OAAQ,CAAEC,OAAQ,aAgBaC,CAAa,CAAET,MAAAA,EAAOC,cAAAA,IACjDf,EAAUiB,EAAYO,MAAMhB,OAChC,CAACC,EAAKC,KAAU,IAAKD,EAAMC,CAAAA,EAAKe,IAAKf,EAAKH,OAC1C,IAEKa,OAAAA,EAASI,MAAMpB,IAAKL,GAAQD,EAAeC,EAAKC,KAalC0B,YAVH,OAASZ,MAAAA,EAAOa,aAAAA,MAC5B,MAAEX,KAAMC,QAtBO,GAAGH,MAAAA,EAAOa,aAAAA,KAC/Bf,EAASM,aAAaJ,WAAea,aAqBDC,CAAe,CAAEd,MAAAA,EAAOa,aAAAA,KACpDX,KAAMI,QApBI,GAAGN,MAAAA,EAAOa,aAAAA,KAC5Bf,EAASM,aAAaJ,WAAea,SAAqB,CACxDN,OAAQ,CAAEC,OAAQ,aAkBaO,CAAY,CAAEf,MAAAA,EAAOa,aAAAA,IAChD3B,EAAUiB,EAAYO,MAAMhB,OAChC,CAACC,EAAKC,KAAU,IAAKD,EAAMC,CAAAA,EAAKe,IAAKf,EAAKH,OAC1C,IAEKa,OAAAA,EAASI,MAAMpB,IAAKL,GAAQD,EAAeC,EAAKC,OArCpD,QAAA,KAAA","file":"useCoda.968aed74.js","sourceRoot":"..","sourcesContent":["const camelize = (str) =>\n  str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n    if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n\nconst mapRowsAndCols = (row, columns) => {\n  const valuesArray = Object.entries(row.values).map(([key, value]) => ({\n    name: columns[key],\n    value,\n  }));\n\n  const values = valuesArray.reduce(\n    (res, curr) => ({ ...res, [camelize(curr.name)]: curr.value }),\n    {}\n  );\n  return { ...values };\n};\n\nexport const coda = (instance) => {\n  const getTableColumns = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/columns`);\n\n  const getTableRows = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getViewColumns = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/columns`);\n\n  const getViewRows = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getTableData = async ({ docId, tableIdOrName }) => {\n    const { data: dataColumns } = await getTableColumns({\n      docId,\n      tableIdOrName,\n    });\n    const { data: dataRows } = await getTableRows({ docId, tableIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  const getViewData = async ({ docId, viewIdOrName }) => {\n    const { data: dataColumns } = await getViewColumns({ docId, viewIdOrName });\n    const { data: dataRows } = await getViewRows({ docId, viewIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  return { getTableData, getViewData };\n};\n"]}