{"version":3,"sources":["useCoda.js"],"names":["camelize","str","replace","match","index","toLowerCase","toUpperCase","mapRowsAndCols","row","columns","valuesArray","Object","entries","values","map","key","value","name","reduce","res","curr","coda","instance","getTableColumns","docId","tableIdOrName","get","getTableRows","params","sortBy","getViewColumns","viewIdOrName","getViewRows","getTableData","data","dataColumns","dataRows","items","id","getViewData"],"mappings":"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","file":"useCoda.023e10c7.js","sourceRoot":"..","sourcesContent":["const camelize = (str) =>\n  str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n    if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n\nconst mapRowsAndCols = (row, columns) => {\n  const valuesArray = Object.entries(row.values).map(([key, value]) => ({\n    name: columns[key],\n    value,\n  }));\n\n  const values = valuesArray.reduce(\n    (res, curr) => ({ ...res, [camelize(curr.name)]: curr.value }),\n    {}\n  );\n  return { ...values };\n};\n\nexport const coda = (instance) => {\n  const getTableColumns = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/columns`);\n\n  const getTableRows = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getViewColumns = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/columns`);\n\n  const getViewRows = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getTableData = async ({ docId, tableIdOrName }) => {\n    const { data: dataColumns } = await getTableColumns({\n      docId,\n      tableIdOrName,\n    });\n    const { data: dataRows } = await getTableRows({ docId, tableIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  const getViewData = async ({ docId, viewIdOrName }) => {\n    const { data: dataColumns } = await getViewColumns({ docId, viewIdOrName });\n    const { data: dataRows } = await getViewRows({ docId, viewIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  return { getTableData, getViewData };\n};\n"]}