{"version":3,"sources":["useCoda.js"],"names":["camelize","str","replace","match","index","toLowerCase","toUpperCase","mapRowsAndCols","row","columns","Object","entries","values","map","key","value","name","reduce","res","curr","coda","instance","getTableData","docId","tableIdOrName","data","dataColumns","get","getTableColumns","dataRows","getTableRows","items","id","getViewData","viewIdOrName","getViewColumns","getViewRows"],"mappings":";AAmBO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAnBP,MAAMA,EAAYC,GAChBA,EAAIC,QAAQ,0BAA2B,SAAUC,EAAOC,GAClD,OAAW,IAAVD,EAAoB,GACR,IAAVC,EAAcD,EAAME,cAAgBF,EAAMG,gBAG/CC,EAAiB,CAACC,EAAKC,KAUpB,MAAA,IATaC,OAAOC,QAAQH,EAAII,QAAQC,IAAI,EAAEC,EAAKC,MAAY,CACpEC,KAAMP,EAAQK,GACdC,MAAAA,KAGyBE,OACzB,CAACC,EAAKC,KAAU,IAAKD,EAAMlB,CAAAA,EAASmB,EAAKH,OAAQG,EAAKJ,QACtD,MAKSK,EAAQC,IAoCZ,MAAA,CAAEC,aAvBY,OAASC,MAAAA,EAAOC,cAAAA,MAC7B,MAAEC,KAAMC,QAbQ,GAAGH,MAAAA,EAAOC,cAAAA,KAChCH,EAASM,aAAaJ,YAAgBC,aAYFI,CAAgB,CAClDL,MAAAA,EACAC,cAAAA,KAEMC,KAAMI,QAdK,GAAGN,MAAAA,EAAOC,cAAAA,KAC7BH,EAASM,aAAaJ,YAAgBC,UAaLM,CAAa,CAAEP,MAAAA,EAAOC,cAAAA,IACjDf,EAAUiB,EAAYK,MAAMd,OAChC,CAACC,EAAKC,KAAU,IAAKD,EAAMC,CAAAA,EAAKa,IAAKb,EAAKH,OAC1C,IAEKa,OAAAA,EAASE,MAAMlB,IAAKL,GAAQD,EAAeC,EAAKC,KAalCwB,YAVH,OAASV,MAAAA,EAAOW,aAAAA,MAC5B,MAAET,KAAMC,QApBO,GAAGH,MAAAA,EAAOW,aAAAA,KAC/Bb,EAASM,aAAaJ,WAAeW,aAmBDC,CAAe,CAAEZ,MAAAA,EAAOW,aAAAA,KACpDT,KAAMI,QAlBI,GAAGN,MAAAA,EAAOW,aAAAA,KAC5Bb,EAASM,aAAaJ,WAAeW,UAiBJE,CAAY,CAAEb,MAAAA,EAAOW,aAAAA,IAChDzB,EAAUiB,EAAYK,MAAMd,OAChC,CAACC,EAAKC,KAAU,IAAKD,EAAMC,CAAAA,EAAKa,IAAKb,EAAKH,OAC1C,IAEKa,OAAAA,EAASE,MAAMlB,IAAKL,GAAQD,EAAeC,EAAKC,OAjCpD,QAAA,KAAA","file":"useCoda.59f38323.js","sourceRoot":"..","sourcesContent":["const camelize = (str) =>\n  str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n    if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n\nconst mapRowsAndCols = (row, columns) => {\n  const valuesArray = Object.entries(row.values).map(([key, value]) => ({\n    name: columns[key],\n    value,\n  }));\n\n  const values = valuesArray.reduce(\n    (res, curr) => ({ ...res, [camelize(curr.name)]: curr.value }),\n    {}\n  );\n  return { ...values };\n};\n\nexport const coda = (instance) => {\n  const getTableColumns = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/columns`);\n\n  const getTableRows = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/rows`);\n\n  const getViewColumns = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/columns`);\n\n  const getViewRows = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/rows`);\n\n  const getTableData = async ({ docId, tableIdOrName }) => {\n    const { data: dataColumns } = await getTableColumns({\n      docId,\n      tableIdOrName,\n    });\n    const { data: dataRows } = await getTableRows({ docId, tableIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  const getViewData = async ({ docId, viewIdOrName }) => {\n    const { data: dataColumns } = await getViewColumns({ docId, viewIdOrName });\n    const { data: dataRows } = await getViewRows({ docId, viewIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  return { getTableData, getViewData };\n};\n"]}